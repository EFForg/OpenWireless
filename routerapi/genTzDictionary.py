#!/usr/bin/python
"""
genTzDictionary - Generate a python file containing a dictionary that maps
Olson Time Zones to their POSIX equivalents.
"""

import os
import sys
import re

TZ_DB = "/usr/share/zoneinfo"
PY_TZ_FILE_PATH = "./tz_info.py"


def generate_dictionary_file():
    tz_info = get_zone_info()
    if tz_info:
        write_zone_file(get_zone_info())
        exit(0)

    #exit with error status if we couldn't read zone info
    exit(1)


def get_zone_info():
    """
    get_zone_info - parse zone info from zoneinfo database into
    a python dictionary
    """
    tzd = {}
    try:
        with open(os.path.join(TZ_DB, "zone.tab"), "r") as zonetab:
            for line in zonetab:
                #skip comments and whitespace
                if re.match("^#", line) or re.match("^\s+$", line):
                    continue

                #olson zone paths are the third column in the table
                sep = re.compile("\s+")
                zone = sep.split(line)[2]

                try:
                    tzd[zone] = read_posix_zone(zone)
                except EnvironmentError: #IOError or OSError
                    continue
                
        return tzd

    except EnvironmentError:
        return false


def read_posix_zone(zone):
    """
    read_posix_zone - return the posix time zone for a give olson time zone
    @param string zone - olson time zone string
    """
    with open(os.path.join(TZ_DB, zone), "r") as zonefile:
        #return last line of file
        return list(zonefile)[-1].rstrip()
    

def write_zone_file(tz_dict):
    """
    write_zone_file - write a timezone dictionary to a new python file
    @param dictionary tz_info - a dictionary mapping olson timezones to POSIX 
    equivalents
    """
    with open(PY_TZ_FILE_PATH, 'w') as py_file:
        header = ("#!/usr/bin/python\n"
                  "\"\"\"\ntz_info - maps Olson time zones to POSIX equivalents\nAutogenerated by genTzDictionary.py\n\"\"\"\n"
                  "tz_info = {\n")

        footer = "}\n"

        py_file.write(header)

        for otz in tz_dict:
            py_file.write("    \"{0}\": \"{1}\",\n".format(otz,tz_dict[otz]))

        py_file.write(footer)


if __name__ == '__main__':
    generate_dictionary_file()
