#!/usr/bin/env python2.7
"""
SSH key storage endpoints for the web UI.

We allow the admin user to set an SSH public key via the web UI only once.
After that, if they wish to add additional keys or change the installed key,
they must do it by logging in with the existing key.

In order to prevent accidental lockouts, we do not consider an SSH key setting
to be finalized until the user logs in with it the first time. This proves that
they are in possession of the corresponding private key.

If the admin loses access to their SSH private key, they will have to reboot the
router into failsafe mode in order to regain SSH access.
"""
import json
import os
import re
import sys

import common
import uci

AUTHORIZED_KEYS = os.path.join(common.get_etc(), 'dropbear/authorized_keys')
KEY_REGEX = r'^ssh-(?:rsa|dss) [A-Za-z0-9+/=]{204,760}( .{1,100})?$'

def key_locked(authorized_keys = AUTHORIZED_KEYS):
    """
    Return whether a key is locked in place - i.e. a key is stored and
    user has logged in once via SSH.
    """
    return (os.path.exists(authorized_keys) and
         uci.get('openwireless.ssh_success') == 'true')

def set_ssh_key(key, authorized_keys = AUTHORIZED_KEYS):
    if key_locked():
        common.render_error('SSH key already stored and used. Cannot modify.')
    if 'PRIVATE KEY' in key:
        common.render_error('That looks like a private key. Try ~/.ssh/id_rsa.pub')
    if '\n' in key:
        common.render_error('Multiline key not allowed.')
    # Minimum key length for 1024-bit key is 204 base64 characters. We limit
    # comment to 100 chars just for reasonableness.
    match = re.match(KEY_REGEX, key)
    if not match:
        common.render_error(
            'SSH key did not match expected format "ssh-rsa <BASE64_KEY> COMMENT".')
    with open(authorized_keys, 'w') as f:
        f.write(key)
    #ensure that the file is world readable
    os.chmod(os.path.dirname(authorized_keys), 0755)
    os.chmod(authorized_keys,0644)
    comment = validate_key(key)
    common.render_success({
        'comment': comment
    })

def validate_key(key):
    match = re.match(KEY_REGEX, key)
    if not match:
        common.render_error(
            'SSH key did not match expected format "ssh-rsa <BASE64_KEY> COMMENT".')
    comment = 'no-name'
    if match and match.group(1):
        return match.group(1).strip()
    else:
        return 'no-name'

def ssh_key_info(authorized_keys = AUTHORIZED_KEYS):
    if not os.path.exists(authorized_keys):
        return {
            'exists': False
        }
    with open(authorized_keys) as f:
        # There may be multiple keys if the user has manually edited them using an
        # SSH session. Only display the first in the web UI.
        key = f.read().split('\n')[0]
    comment = validate_key(key)
    return {
        'exists': True,
        'locked': key_locked(),
        'comment': comment,
        'contents': key
    }

def jsonrpc_ssh_key():
    data = json.loads(sys.stdin.read())
    try:
        if data['method'] == 'set_ssh_key':
            try:
                key = data['params'][0].strip()
            except KeyError, e:
                common.render_error(e.__str__())
            except ValueError, e:
                common.render_error(e.__str__())
            # Re-exec with root privileges so we can write to authorized_keys.
            os.execl('/usr/bin/sudo', 'sudo', sys.argv[0], key)
    except KeyError, e:
        pass
    common.render_error('No method available')

if __name__ == '__main__':
    # We are initially called from CGI by www-data. After extracting the key
    # from input, we call ourselves with again with sudo to gain root
    # privileges. Note that we can't just grant suid (chmod u+s) on this binary,
    # because the OS will ignore suid bits on #! executables since it would be
    # insecure to observe them.
    if len(sys.argv) > 1:
        set_ssh_key(sys.argv[1])
    else:
        jsonrpc_ssh_key()
